#include <GL/gl.h>
#include <GL/glx.h>
#include <GL/glu.h>
#include <math.h>
#include <vector>

#define Band_Power  4   
#define Band_Points 16
#define Band_Mask (Band_Points-2)
#define Sections_In_Band ((Band_Points/2)-1)
#define Total_Points    (Sections_In_Band*Band_Points)
#define Section_Arc (6.28/Sections_In_Band)
const float R = -10;    //test radius

class Sphere
{
    public:
        float x, y, z, radius;
        int stacks;
        int slices;
        std::vector<float> xverts, yverts, zverts;
        Sphere();
        Sphere(double, int, int);
        void findPoints();
        void draw();
};

Sphere::Sphere()
{
    x = y = z = 0.0;
    radius = 0;
}

Sphere::Sphere(double m_radius, int m_slices, int m_stacks)
{
    radius = m_radius;
    slices = m_slices;
    stacks = m_stacks;
    x = y = z = 0.0;
}

void Sphere::findPoints()
{
    float x_angle;
    float y_angle;

    for(int i = 0; i < Total_Points; ++i)
    {
        x_angle = (float)(i&1)+(i>>Band_Power);
        
        y_angle = (float)((i&Band_Mask)>>1)+((i>>Band_Power)*(Sections_In_Band));
        
        x_angle *= (float)Section_Arc/2.0;
        y_angle *= (float)Section_Arc*-1;
        
        xverts.push_back(R*sin(x_angle)*sin(y_angle));
        yverts.push_back(R*cos(x_angle));
        zverts.push_back(R*sin(x_angle)*cos(y_angle));   
    }
}

void Sphere::draw()
{
    findPoints();
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0, 1.0, -1.0, 1.0, 1.0, 20.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    glBegin(GL_TRIANGLE_STRIP);
        for(int i = 0; i < Total_Points; ++i)
        {
            glVertex3f(xverts[i], yverts[i], zverts[i]);
        }
    glEnd();
}

